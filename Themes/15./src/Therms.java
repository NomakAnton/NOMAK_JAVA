public class Therms {
    /*
    class A extends B - ключевое слово,показывает что класс B является потомком класса A.Весь код который был
    в классе B переносится в класс A (помимо конструктора)

    Потомок ВСЕГДА является частным случаем класса предка

    Модификатор protected - обеспечивает уровень доступа "защищенный". Таким образом, член класса или конструктор
    доступен в классах потомках, а так же для всех классов текущего пакета.

    Переопределение метода - механизм наследования, позволяющий для классов - потомков написать метод, имеющий
    сигнатуру метода класса-предка, но с другой реализацией.(название и параметры методы одни и те же,но реализация
    метода другая)

    * Восходящее преобразование  - возможность присвоить объектной переменной класса-предка ссылку на объект
    класса-потомка(неявное преобразование)

    * Полиморфизм - последний принцип ООП.Возможность оперировать с объектами разных типов таким образом, будто они
    являются экземплярами одного типа.Достигается за счет применения наследования и восходящего преобразования.

    * Минусы наследования:
    *Трудности с контролем поведения класса - предка (к примеру класс потомок наследует все методы родителя
    НАСЛЕДУЕМ ВСЕ ЛИБО НИЧЕГО!!!

    *Невозможность ограничиться наследование определенных членов класса

    Ключевое слово super

    1)Позволяет вызвать в классе-потомке конструктор класса-предка
    2)super - аналогично this, но имеет ссылку на объект предка

    ## Абстрактные классы

    *Классы, объекты которых создать нельзя, но можно создать их объектные переменные (помечаются ключевым словом - abstract)

    Абстрактный метод - метод который не имеет реализации. Если класс имееет хотя бь один метод, помеченный модификатором abstract
    то класс ДОЛЖЕН БЫТЬ помечен как abstract

    Аннотиции

    Ключевые слова, которые начинаются с @. Предоставляют определенную мета-информацию в момент компиляции или запуска

    Анотация Override - говорит компилятору что нужно проверить сигнатуру переопределяемого метода - действительно ли мы
    переопределяем метод предка

     */
}
